<script lang="js" backend on="init, dbInit">
/**
* Various search utilities
* @var {Object}
*/
app.utils.search = {};


/**
* Convert an incomming search tag into a MongoDB compatible expression
* @param {string} field The field name to query against
* @param {string} value The incomming single string value
* @param {Object} [options] Additional options
* @param {boolean} [options.range=false] Allow numeric range expansion
*
* @example
* app.utils.search.tagGlob('field', 'foo') //= {field: foo}
* app.utils.search.tagGlob('field', '1,2,3') //= {field: {$in: ['1', '2', '3']}}
* app.utils.search.tagGlob('field', '4-7') //= {field: {$in: ['4', '5', '6', '7']}} (explodes into values)
* app.utils.search.tagGlob('field', '20,21,22-24') //= {field: {$in: ['20', '21', '22', '23', '24']}} (explodes into all values)
*/
app.utils.search.tagGlob = (field, value, options) => {
	var settings = {
		range: false,
		...options,
	};

	// TODO: Note implementation from client-side stringify. CSV multi-select tags must also support quoted strings.
	var splitValue = value.split(/\s*,\s*/);

	if (settings.range && splitValue.some(v => /-/.test(v))) { // Some values have ranges
		return {[field]: {$in: _(splitValue)
			.map(v => {
				if (/-/.test(v)) { // This value is a range - explode
					var rangeExtent = v.split(/\s*-\s*/, 2);
					return _.range(parseInt(rangeExtent[0]), parseInt(rangeExtent[1]) + 1);
				} else { // This value is probably a scalar
					return [v];
				}
			})
			.flatten()
			.uniq()
			.value()
		}};
	} else if (splitValue.length == 1) { // Only one arg anyway
		return {[field]: value};
	} else { // Assume CSV of values
		return {[field]: {$in: splitValue}};
	}
};
</script>
