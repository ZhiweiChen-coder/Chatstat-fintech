<script lang="js" backend on="middleware">
let _ = require('lodash');
let axios = require('axios');
let fs = require('node:fs');
let crypto = require('node:crypto');
let debug = require('debug')('avatar');

/**
* Generate an avatar for an endpoint based on a data entity
* By default the entity is assumed to be `req.user` but this can be changed by supplying something else or a function by which to retrieve it
*
* @param {string|function} [entity="req.user"] Either a dotted notation path for the entity to use as the avatar or an async function called as `(req, res)` which will return it
* @param {string} [entityId="_id"] Dotted notation path of the retrieved entity ID to use when caching
* @param {array<string>} [order] The fetch order of the supported avatar modules, default is `url`, `gravatar`, `location`, `fallbackUrl` (items that are disabled with a boolean `false` are skipped)
* @param {boolean} [cache=true] Whether to enable caching, if true an existing cache avatar is used if found instead of refetching
* @param {string} [cachePath="app.config.paths.data/avatars"] Where to cache fetched avatars
* @param {function} [errHandler] How to handle errors, called as `(error, req, res)`
* @param {string|number} [size=400] Either the size in pixels for the width + height or the path to the size parameter (overrides width / height if found)
* @param {number} [width=400] Ideal width when requesting avatars
* @param {number} [height=400] Ideal height when requesting avatars
*
* @param {string|boolean} [url="url"] The dotted notation path of the URL to use as an avatar or boolean false to disable
*
* @param {string|boolean} [gravatar="email"] Either the dotted notation path to where to discover the hashable value to fetch from gravatar or boolean false to disable
* @param {string} [gravatarStyle='identicon'] Gravatar style to use if the user doesn't have a registered icon. ENUM: 'mp', 'identicon', 'monsterid', 'wavatar', 'retro', 'robohash', 'blank'
*
* @param {string|boolean} [location="location"] The dotted notation path of the location branch or boolean false to disable
* @param {string} [locationLat="lat"] Subpath from `location` to find the Latitude, if any
* @param {string} [locationLon="lon"] Subpath from `location` to find the Longditude, if any
* @param {string} [locationZoom="zoom"] Subpath from `location` to find the zoom, if any
* @param {string} [locationZoom="bearing"] Subpath from `location` to find the bearing, if any
* @param {string} [locationStyle="mapbox"] Subpath from `location` to find the location style
* @param {string} [locationStyleSubtype="streets-v11"] Subpath from `location` to find the location style subtype
* @param {Object} [locationDefaults] Default object to set all settings if they are not available in dotted notation form
*
* @param {string|boolean} [fallbackUrl="https://gravatar.com/avatar/00000000000000000000000000000000"] Fallback URL to use if all else fails, boolean to throw instead
*
* @example Serve a Gravatar image for a user email - minimal example
* app.get('/api/users/:id/avatar', app.middleware.express.avatar())
*
* @example Serve a URL for a user avatar (if there is one in thumbnail.url) otherwise use the `email` path to fetch a Gravatar, using monster theme if no registered icon
* app.get('/api/users/:id/avatar', app.middleware.express.avatar({
*   url: 'thumbnail.url',
*   gravatar: 'email',
*   gravatarStyle: 'monsterid',
* }))
*/
app.middleware.express.avatar = options => {
	let settings = {
		// General options
		entity: 'req.user',
		entityId: '_id',
		order: ['url', 'gravatar', 'location', 'fallbackUrl'],
		cache: true,
		cachePath: `${app.config.paths.data}/avatars`,
		errHandler: (e, req, res) => res.sendError(e),
		size: undefined,
		width: 400,
		height: 400,

		// Modules:
		url: false,
		gravatar: 'email',
		gravatarStyle: 'identicon',
		location: false,
		locationLat: 'lat',
		locationLon: 'lon',
		locationDefaults: {
			style: 'mapbox',
			styleSubtype: 'streets-v11',
			lat: 0,
			lon: 0,
			zoom: 8,
			bearing: 0,
		},

		...options,
	};

	return function(req, res) {
		/**
		* Avatar prototype object - calculated as we fall through the below promise stages
		* @type {Object}
		* @property {string} id The unique identifier of the Avatar - used for caching
		* @property {Object} entity The entity returned by `options.entity` (either via path or function)
		* @property {string} cachePath The full cache path to the avatar - including file name component
		* @property {string|AxiosRequest} Either the URL to fetch or an AxiosRequest
		*/
		let avatar = {
			id: '',
			entity: {},
			cachePath: '',
			url: '',
			width: settings.width,
			height: settings.height,
		};

		return Promise.resolve()
			.then(()=> Promise.all([
				// Fetch the entity if its a function
				_.isString(settings.entity) ? _.get({req, res}, settings.entity)
				: _.isFunction(settings.entity) ? settings.entity(req, res)
				: Promise.reject('Unknown type when retrieving Avatar entity'),

				// Ensure the cachePath exists
				fs.promises.mkdir(settings.cachePath, {recrusive: true})
					.catch(()=> false), // Ignore - already-exists errors
			]))
			.then(([entity]) => {
				avatar.id = _.get(entity, settings.entityId);
				avatar.entity = entity;
				// Compute width + height / size {{{
				if (settings.size) {
					if (isFinite(settings.size)) {
						[avatar.width, avatar.height] = [settings.size, settings.size];
					} else if (_.isString(settings.size)) {
						let computedSize = _.get({...entity, req}, settings.size);
						if (computedSize) [avatar.width, avatar.height] = [computedSize, computedSize];
					} else {
						throw new Error('Size parameter must be a number or string path');
					}
				}
				// }}}
				avatar.cachePath = `${settings.cachePath}/${avatar.id}-${avatar.width}x${avatar.height}.png`;

				return settings.cache
					? fs.promises.access(avatar.cachePath)
						.then(()=> {
							debug(`Serving existing Avatar for ID "${avatar.id}"`, avatar.cachePath);
							res.sendFile(avatar.cachePath);
							throw 'SKIP';
						})
						.catch(e => e === 'SKIP' ? Promise.reject('SKIP') : entity) // Continue on to fetch a new avatar
					: entity;
			})
			.then(entity => {
				// Find the module to use based on the first successful criteria

				settings.order.find(module => {
					debug(`Trying module "${module}" for Avatar ID "${avatar.id}"`);
					switch (module) {
						case 'url':
							// Url {{{
							if (settings.url && !_.isEmpty(_.get(entity, settings.url))) {
								avatar.url = _.get(entity, settings.url);
								return true;
							}
							break;
							// }}}
						case 'gravatar':
							// Gravatar {{{
							if (settings.gravatar && !_.isEmpty(_.get(entity, settings.gravatar))) {
								avatar.url = {
									url: 'https://gravatar.com/avatar/' + crypto.createHash('md5').update(_.get(entity, settings.gravatar).toString()).digest('hex'),
									params: {
										size: Math.max(avatar.width, avatar.height),
										d: settings.gravatarStyle,
									},
								};
								return true;
							}
							break;
							// }}}
						case 'location':
							// Location (from lat / lng or street address) {{{
							if (settings.location && !_.isEmpty(_.get(entity, settings.location))) {
								let entityLocation = _.get(entity, settings.location);

								let location = _.defaults({}, {
									style: _.get(entityLocation, settings.locationStyle),
									styleSubtype: _.get(entityLocation, settings.locationStyleSubtype),
									lat: _.get(entityLocation, settings.locationLat),
									lon: _.get(entityLocation, settings.locationLon),
									zoom: _.get(entityLocation, settings.locationZoom),
									brearing: _.get(entityLocation, settings.locationBearing),
									width: avatar.width,
									height: avatar.height,
								}, settings.locationDefaults);
								debug({location, thumbnail: entity.thumbnail});

								debug(`Requesting location based Avatar for ID "${avatar.id}" for LAT:${location.lat}, LON:${location.lon}, ZOOM: ${location.zoom}, BEARING: ${location.bearing}`);
								avatar.url = {
									url: `https://api.mapbox.com/styles/v1/${location.style}/${location.styleSubtype}/static/${location.lon},${location.lat},${location.zoom},${location.bearing}/${location.width}x${location.height}`,
									params: {
										access_token: app.config.mapBox.accessToken,
									},
								};

								return true;
							}
							break;
							// }}}
						case 'fallbackUrl':
							// fallbackUrl {{{
							if (_.isString(settings.fallbackUrl) && !_.isEmpty(settings.fallbackUrl)) {
								avatar.url = settings.fallbackUrl;
								return true;
							}
							break;
							// }}}
						default:
							throw new Error(`Unknown Avatar module "${module}"`);
					}
				});

				if (!avatar.url) throw new Error('No avatar module returned a valid avatar URL!');
				return avatar;
			})
			.then(avatar => {
				debug(`Requesting Avatar URL for ID "${avatar.id}" - ${_.isObject(avatar.url) ? avatar.url.url : avatar.url}`);

				return axios.get(_.isObject(avatar.url) ? avatar.url.url : avatar.url, {
					responseType: 'stream',
					...(_.isObject(avatar.url) ? avatar.url : {}),
				})
			})
			.then(stream => new Promise((resolve, reject) =>
				stream.data.pipe(fs.createWriteStream(avatar.cachePath)
					.on('close', resolve)
					.on('error', reject)
				)
			))
			.then(()=> {
				debug(`Saved Avatar for ID "${avatar.id}"`);
				res.sendFile(avatar.cachePath)
			})
			.catch(e => e === 'SKIP' ? null : settings.errHandler(e, req, res)) // Skip over "SKIP" responses, otherwise pass to error handler
	};
};
</script>
