<script lang="js" backend on="preMiddleware, gulp">
const Lock = require('@momsfriendlydevco/lock');

//console.log('lock', app.lock)
//console.log('throttle', app.throttle)

app.lock = new Lock(app.config.lock);

app.on('exit', () => app.lock.destroy());

exports = app.lock.init();
</script>

<script lang="js" backend endpoint>
const _ = require('lodash');

/**
* Attempt to gain a lock based on the contents of req.body
* NOTE: This will also succeed if the lock exists with the existing user anyway
* @param {*} req.body Complex object of the lock to create (automatically hashed)
* @returns {Number} Either error code 200 for successful locking or 423 if hashable data is already locked
* @see POST /api/locks/query on how to query lock data
*/
app.post('/api/locks/create', app.middleware.express.isUser(), (req, res) => {
	if (_.isEmpty(req.body)) return res.sendError(400, 'No hashable body provided to obtain lock');

	app.lock.create(req.body, {user: req.user._id})
		.then(created => {
			if (created) {
				return res.sendStatus(200);
			} else {
				return app.lock.get(req.body)
					.then(lock => {
						if (lock?.user == req.user._id) {
							return res.sendStatus(200); // Lock does exist but its owned by this user anyway - assume success
						} else {
							return res.sendError(423, 'Already locked'); // Lock user differs
						}
					})
					.catch(() => {
						return res.sendError(423, 'Already locked') // Lock does exist
					});
			}
		})
		.catch(res.sendError)
});


/**
* Query lock data
* @param {*} req.body Complex object of the lock to create (automatically hashed)
* @returns {Object|Boolean} An object of the form `{user: String}` if the lock exists, otherwise boolean false (released)
* @see POST /api/locks on how to query lock data
*/
app.post('/api/locks/query', app.middleware.express.isUser(), (req, res) => {
	if (_.isEmpty(req.body)) return res.sendError(400, 'No hashable body provided to obtain lock');

	app.lock.exists(req.body)
		.then(isLocked => isLocked ? app.lock.get(req.body) : false)
		.then(lockData => res.send(lockData))
		.catch(res.sendError)
});


/**
* Query lock data, hydrating the lock if it exists and this user is th owner
* @param {*} req.body Complex object of the lock to create (automatically hashed)
* @returns {Object|Boolean} An object of the form `{user: String}` if the lock exists, otherwise boolean false (released)
* @see POST /api/locks on how to query lock data
*/
app.post('/api/locks/hydrate', app.middleware.express.isUser(), (req, res) => {
	if (_.isEmpty(req.body)) return res.sendError(400, 'No hashable body provided to obtain lock');

	const exposeFields = ['user', 'created']; // What fields of the lock data to expose to the front end

	app.lock.get(req.body)
		.then(isLocked => isLocked ? app.lock.get(req.body) : undefined)
		.then(lockData => {
			if (lockData === undefined) { // No lock exists - create it
				//app.log('Create lock');
				return app.lock.create(req.body, {user: req.user._id})
					.then(()=> res.send(_.pick(lockData, exposeFields)));
			} else if (lockData.user == req.user._id) { // User already owns the lock - touch it
				//app.log('Keep-alive lock');
				return app.lock.alive(req.body)
					.then(()=> res.send(_.pick(lockData, exposeFields)))
			} else if (lockData.user) { // Lock exists and the user doesn't own it
				//app.log('Locked');
				return res.send(_.pick(lockData, exposeFields));
			} else { // Unknown state
				app.log.warn('Lock in unknown state', lockData);
				return res.send(false);
			}
		})
		.catch(res.sendError)
});


/**
* Release locked data
* @param {*} req.body Complex object of the lock to create (automatically hashed)
* @returns {Number} Status code 200 when the lock is released
* @see POST /api/locks on how to query lock data
*/
app.post('/api/locks/release', app.middleware.express.isUser(), (req, res) => {
	if (_.isEmpty(req.body)) return res.sendError(400, 'No hashable body provided to obtain lock');

	// TODO: Use hasPermission
	if (req.user.permissions.locksKick) { // User has kick permission - just release the lock
		app.lock.release(req.body)
			.finally(()=> res.sendStatus(200))
	} else { // User does not have universal Kick permission - check they own the lock first
		app.lock.get(req.body)
			.then(lockData => {
				if (!lockData) return; // Doesn't exist anyway
				if (lockData.user != req.user._id) throw new Error('403: You do not have permission to remove other users locks');
				app.lock.release(req.body)
					.finally(()=> res.sendStatus(200))
			})
	}
});
</script>